// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kafka-iot-connect/client/mysql/model"
)

func newEkuiperClient(db *gorm.DB, opts ...gen.DOOption) ekuiperClient {
	_ekuiperClient := ekuiperClient{}

	_ekuiperClient.ekuiperClientDo.UseDB(db, opts...)
	_ekuiperClient.ekuiperClientDo.UseModel(&model.EkuiperClient{})

	tableName := _ekuiperClient.ekuiperClientDo.TableName()
	_ekuiperClient.ALL = field.NewAsterisk(tableName)
	_ekuiperClient.ID = field.NewInt32(tableName, "id")
	_ekuiperClient.ClientName = field.NewString(tableName, "clientName")
	_ekuiperClient.ClientType = field.NewString(tableName, "clientType")
	_ekuiperClient.ServerID = field.NewInt32(tableName, "serverId")

	_ekuiperClient.fillFieldMap()

	return _ekuiperClient
}

type ekuiperClient struct {
	ekuiperClientDo

	ALL        field.Asterisk
	ID         field.Int32
	ClientName field.String
	ClientType field.String
	ServerID   field.Int32

	fieldMap map[string]field.Expr
}

func (e ekuiperClient) Table(newTableName string) *ekuiperClient {
	e.ekuiperClientDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ekuiperClient) As(alias string) *ekuiperClient {
	e.ekuiperClientDo.DO = *(e.ekuiperClientDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ekuiperClient) updateTableName(table string) *ekuiperClient {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.ClientName = field.NewString(table, "clientName")
	e.ClientType = field.NewString(table, "clientType")
	e.ServerID = field.NewInt32(table, "serverId")

	e.fillFieldMap()

	return e
}

func (e *ekuiperClient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ekuiperClient) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["id"] = e.ID
	e.fieldMap["clientName"] = e.ClientName
	e.fieldMap["clientType"] = e.ClientType
	e.fieldMap["serverId"] = e.ServerID
}

func (e ekuiperClient) clone(db *gorm.DB) ekuiperClient {
	e.ekuiperClientDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ekuiperClient) replaceDB(db *gorm.DB) ekuiperClient {
	e.ekuiperClientDo.ReplaceDB(db)
	return e
}

type ekuiperClientDo struct{ gen.DO }

type IEkuiperClientDo interface {
	gen.SubQuery
	Debug() IEkuiperClientDo
	WithContext(ctx context.Context) IEkuiperClientDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEkuiperClientDo
	WriteDB() IEkuiperClientDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEkuiperClientDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEkuiperClientDo
	Not(conds ...gen.Condition) IEkuiperClientDo
	Or(conds ...gen.Condition) IEkuiperClientDo
	Select(conds ...field.Expr) IEkuiperClientDo
	Where(conds ...gen.Condition) IEkuiperClientDo
	Order(conds ...field.Expr) IEkuiperClientDo
	Distinct(cols ...field.Expr) IEkuiperClientDo
	Omit(cols ...field.Expr) IEkuiperClientDo
	Join(table schema.Tabler, on ...field.Expr) IEkuiperClientDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEkuiperClientDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEkuiperClientDo
	Group(cols ...field.Expr) IEkuiperClientDo
	Having(conds ...gen.Condition) IEkuiperClientDo
	Limit(limit int) IEkuiperClientDo
	Offset(offset int) IEkuiperClientDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEkuiperClientDo
	Unscoped() IEkuiperClientDo
	Create(values ...*model.EkuiperClient) error
	CreateInBatches(values []*model.EkuiperClient, batchSize int) error
	Save(values ...*model.EkuiperClient) error
	First() (*model.EkuiperClient, error)
	Take() (*model.EkuiperClient, error)
	Last() (*model.EkuiperClient, error)
	Find() ([]*model.EkuiperClient, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EkuiperClient, err error)
	FindInBatches(result *[]*model.EkuiperClient, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EkuiperClient) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEkuiperClientDo
	Assign(attrs ...field.AssignExpr) IEkuiperClientDo
	Joins(fields ...field.RelationField) IEkuiperClientDo
	Preload(fields ...field.RelationField) IEkuiperClientDo
	FirstOrInit() (*model.EkuiperClient, error)
	FirstOrCreate() (*model.EkuiperClient, error)
	FindByPage(offset int, limit int) (result []*model.EkuiperClient, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEkuiperClientDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ekuiperClientDo) Debug() IEkuiperClientDo {
	return e.withDO(e.DO.Debug())
}

func (e ekuiperClientDo) WithContext(ctx context.Context) IEkuiperClientDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ekuiperClientDo) ReadDB() IEkuiperClientDo {
	return e.Clauses(dbresolver.Read)
}

func (e ekuiperClientDo) WriteDB() IEkuiperClientDo {
	return e.Clauses(dbresolver.Write)
}

func (e ekuiperClientDo) Session(config *gorm.Session) IEkuiperClientDo {
	return e.withDO(e.DO.Session(config))
}

func (e ekuiperClientDo) Clauses(conds ...clause.Expression) IEkuiperClientDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ekuiperClientDo) Returning(value interface{}, columns ...string) IEkuiperClientDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ekuiperClientDo) Not(conds ...gen.Condition) IEkuiperClientDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ekuiperClientDo) Or(conds ...gen.Condition) IEkuiperClientDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ekuiperClientDo) Select(conds ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ekuiperClientDo) Where(conds ...gen.Condition) IEkuiperClientDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ekuiperClientDo) Order(conds ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ekuiperClientDo) Distinct(cols ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ekuiperClientDo) Omit(cols ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ekuiperClientDo) Join(table schema.Tabler, on ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ekuiperClientDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ekuiperClientDo) RightJoin(table schema.Tabler, on ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ekuiperClientDo) Group(cols ...field.Expr) IEkuiperClientDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ekuiperClientDo) Having(conds ...gen.Condition) IEkuiperClientDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ekuiperClientDo) Limit(limit int) IEkuiperClientDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ekuiperClientDo) Offset(offset int) IEkuiperClientDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ekuiperClientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEkuiperClientDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ekuiperClientDo) Unscoped() IEkuiperClientDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ekuiperClientDo) Create(values ...*model.EkuiperClient) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ekuiperClientDo) CreateInBatches(values []*model.EkuiperClient, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ekuiperClientDo) Save(values ...*model.EkuiperClient) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ekuiperClientDo) First() (*model.EkuiperClient, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EkuiperClient), nil
	}
}

func (e ekuiperClientDo) Take() (*model.EkuiperClient, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EkuiperClient), nil
	}
}

func (e ekuiperClientDo) Last() (*model.EkuiperClient, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EkuiperClient), nil
	}
}

func (e ekuiperClientDo) Find() ([]*model.EkuiperClient, error) {
	result, err := e.DO.Find()
	return result.([]*model.EkuiperClient), err
}

func (e ekuiperClientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EkuiperClient, err error) {
	buf := make([]*model.EkuiperClient, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ekuiperClientDo) FindInBatches(result *[]*model.EkuiperClient, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ekuiperClientDo) Attrs(attrs ...field.AssignExpr) IEkuiperClientDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ekuiperClientDo) Assign(attrs ...field.AssignExpr) IEkuiperClientDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ekuiperClientDo) Joins(fields ...field.RelationField) IEkuiperClientDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ekuiperClientDo) Preload(fields ...field.RelationField) IEkuiperClientDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ekuiperClientDo) FirstOrInit() (*model.EkuiperClient, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EkuiperClient), nil
	}
}

func (e ekuiperClientDo) FirstOrCreate() (*model.EkuiperClient, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EkuiperClient), nil
	}
}

func (e ekuiperClientDo) FindByPage(offset int, limit int) (result []*model.EkuiperClient, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ekuiperClientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ekuiperClientDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ekuiperClientDo) Delete(models ...*model.EkuiperClient) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ekuiperClientDo) withDO(do gen.Dao) *ekuiperClientDo {
	e.DO = *do.(*gen.DO)
	return e
}
